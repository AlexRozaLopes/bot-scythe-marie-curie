name: ci-deploy
on: [ push ]
jobs:
  docker-config:
    runs-on: ubuntu-latest
    steps:
      - name: set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: set up DOCKER BUILDX
        uses: docker/setup-buildx-action@v3
      - name: Login to DOCKER HUB
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: BUILD and PUSH
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: alexroza/bot-scythe-marie-curie:latest
          build-args: DISCORD_TOKEN=${{ secrets.DISCORD_TOKEN }}
  delete-ec2:
    runs-on: ubuntu-latest
    needs: docker-config
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2 # Altere para a regi√£o apropriada

      - name: Delete EC2 instance
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=ExampleAppServerInstance" --query "Reservations[*].Instances[*].InstanceId" --output text)
          if [ -n "$INSTANCE_ID" ]; then
            aws ec2 terminate-instances --instance-ids $INSTANCE_ID
            echo "Instance $INSTANCE_ID terminated."
          else
            echo "No instance found with the name YOUR_INSTANCE_NAME."
          fi
  deploy-aws:
    runs-on: ubuntu-latest
    needs: delete-ec2
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: terraform init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -var "replace_instance=false" -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
